@page "/AudioPlayer"
@using System.Globalization;
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
<PageTitle>WebAudio - Audio Player</PageTitle>

<h2>Audio Player</h2>

<div style="user-select: none;display:flex;flex-direction:row;" aria-label="Player controls">
    <button class="media-control" aria-label="Randomize tracks" @onclick=PlayRandomizedList>🔀</button>
    <button class="media-control" aria-label="Previous track" @onclick=GotoPreviousTrack>⏮</button>
    @if (state.Playing)
    {
        <button class="media-control" aria-label="Pause" @onclick=Pause>⏸</button>
    }
    else
    {
        <button class="media-control" aria-label="Play" @onclick=Play>⏯</button>
    }
    <button class="media-control" aria-label="Next track" @onclick=GotoNextTrack>⏭</button>
</div>
<span style="width:5%;display:inline-block;text-align:right;">
    @Math.Round(state.PlayTime, 0)
</span>
<svg width="60%" viewBox="0 0 1 0.02" style="margin-left:5px; margin-right:5px;">
    <rect fill="#bbb" x="0" y="0" width="1" height="0.02"></rect>
    @if (state.TrackDuration is not 0)
    {
        <rect fill="#555" x="0" y="0" width="@((state.PlayTime/state.TrackDuration).ToString(CultureInfo.InvariantCulture))" height="0.02"></rect>
    }
</svg>
<span style="width:5%;display:inline-block;">
    @(state.TrackDuration > 0 ? Math.Round(state.TrackDuration, 0) : "")
</span>
<ol>
    @for (int i = 0; i < trackFilePaths.Length; i++)
    {
        @if (i == state.CurrentTrack)
        {
            <li><u>@trackFilePaths[i][5..]</u></li>
        }
        else
        {
            <li>@trackFilePaths[i][5..]</li>
        }
    }
</ol>


@code {
    // CONSTANTS ( SNAKE_CASE )

    // STATE ( camelCase )
    public AudioPlayerPageState state;
    private string[] trackFilePaths = new string[]
    {
        "Data/file_example_MP3_700KB.mp3",
        "Data/yamaha-psr-16-demo-music-25226.mp3",
        "Data/dream-sound-effect-downscale-7134.mp3",
        "Data/drama-cue-synth-and-cello-114417.mp3"
    };

    // SERVICES ( _camelCase )
    private AudioContext Audio_context = default!;
    private AudioDestinationNode Audio_destination = default!;
    private AudioBufferSourceNode Audio_bufferSourceNode = default!;
    private AudioBuffer Audio_buffer = default!;

    // CONSTRUCTORS 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await EnsureInitialized();
            await EnsureCurrentTrackLoaded();
        }
        catch
        {
            Console.WriteLine("Couldn't initialize yet.");
        }
    }

    public async Task EnsureInitialized()
    {
        if (Audio_context is { }) return;

        Audio_context = await AudioContext.CreateAsync(JSRuntime);
        Audio_destination = await Audio_context.GetDestinationAsync();
    }

    public async Task EnsureCurrentTrackLoaded()
    {
        if (state.IsCurrentTrackLoaded) return;

        byte[] trackData = await HttpClient.GetByteArrayAsync(trackFilePaths[state.CurrentTrack]);
        Audio_buffer = await Audio_context.DecodeAudioDataAsync(trackData);
        state.TrackDuration = await Audio_buffer.GetDuration();

        state.IsCurrentTrackLoaded = true;
    }

    public async Task Play()
    {
        await EnsureInitialized();
        if (state.Playing) return;
            state.Interactions++;
        await EnsureCurrentTrackLoaded();

        Audio_bufferSourceNode = await Audio_context.CreateBufferSourceAsync();
        await Audio_bufferSourceNode.SetBufferAsync(Audio_buffer);
        await Audio_bufferSourceNode.ConnectAsync(Audio_destination);
        if (state.PauseTime is null)
        {
            await Audio_bufferSourceNode.StartAsync();
        }
        else
        {
            await Audio_bufferSourceNode.StartAsync(when: 0, offset: state.Offset);
        }
        state.StartTime = await Audio_context.GetCurrentTimeAsync();

        state.Playing = true;
        var currentInteractions = state.Interactions;
        while (currentInteractions == state.Interactions)
        {
            state.PlayTime = await Audio_context.GetCurrentTimeAsync() - state.StartTime + state.Offset;
            StateHasChanged();
            if (state.PlayTime >= state.TrackDuration)
            {
                await GotoNextTrack();
            }
            await Task.Delay(100);
        }
    }

    public async Task Pause()
    {
        if (!state.Playing) return;
        state.Interactions++;

        await Audio_bufferSourceNode.DisconnectAsync();
        await Audio_bufferSourceNode.StopAsync();

        var currentTime = await Audio_context.GetCurrentTimeAsync();
        state.PauseTime = await Audio_context.GetCurrentTimeAsync();
        if (state.Offset + currentTime - state.StartTime > state.TrackDuration)
        {
            state.Offset = 0;
        }
        else
        {
            state.Offset += currentTime - state.StartTime;
        }

        state.Playing = false;
    }

    public Task GotoPreviousTrack() 
        => _switchTrack(() => state.CurrentTrack = (state.CurrentTrack - 1 + trackFilePaths.Length) % trackFilePaths.Length);

    public Task GotoNextTrack() 
        => _switchTrack(() => state.CurrentTrack = (state.CurrentTrack + 1) % trackFilePaths.Length);

    private async Task _switchTrack(Action changeTrack)
    {
        await EnsureInitialized();

        var wasPlaying = state.Playing;
        if (wasPlaying)
        {
            await Pause();
        }
        changeTrack();
        state.IsCurrentTrackLoaded = false;
        await EnsureCurrentTrackLoaded();
        state.Offset = 0;
        state.PlayTime = 0;
        if (wasPlaying)
        {
            await Play();
        }
    }

    public async Task PlayRandomizedList()
    {
        var wasPlaying = state.Playing;
        if (wasPlaying)
        {
            await Pause();
        }
        trackFilePaths = trackFilePaths
            .OrderBy(x => Random.Shared.Next())
            .ToArray();

        state.IsCurrentTrackLoaded = false;
        state.CurrentTrack = 0;
        state.Offset = 0;
        state.PlayTime = 0;
        if (wasPlaying)
        {
            await Play();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await Pause();
    }
}