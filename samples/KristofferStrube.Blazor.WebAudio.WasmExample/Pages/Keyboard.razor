@page "/Keyboard"
@inject IJSRuntime JSRuntime
<PageTitle>WebAudio - KeyBoard</PageTitle>

<svg @onpointerup="StopSound"
     @onpointerenter="StopSound"
     @onpointerleave="StopSound"
     width="100%"
     height="40vh"
     viewBox="0 0 @(keys.Count(k => k.Color == "white")*100) 600"
     style="user-select:none;touch-action:none;">
    @foreach (var i in whiteKeyIndices)
    {
        var k = i;
        <rect @onpointerdown="(e) => PointerMove(keys[k].Octave, keys[k].Pitch, e)"
          @onpointermove="(e) => PointerMove(keys[k].Octave, keys[k].Pitch, e)"
              x="@(keys.GetRange(0, i).Count(k => k.Color == "white")*100)"
              y="0"
              width="100"
              height="600"
              fill="white"
              stroke="black"
              stroke-width="1"></rect>
        <text>
            <text x="@(keys.GetRange(0, i).Count(k => k.Color == "white")*100+20)"
                  y="580"
                  width="100"
                  height="600"
            fill="white"
            stroke="black"
            stroke-width="4"
            style="font-size:80px;pointer-events:none;">
                @keys[i].Name
            </text>
        </text>
    }
    @foreach (var i in blackKeyIndices)
    {
        var k = i;
        <rect @onpointerdown="(e) => PointerMove(keys[k].Octave, keys[k].Pitch, e)"
          @onpointermove="(e) => PointerMove(keys[k].Octave, keys[k].Pitch, e)"
              x="@(keys.GetRange(0, i).Count(k => k.Color == "white")*100-35)"
              y="0"
              width="70"
              height="400"
              fill="black"
              stroke="black"
              stroke-width="1"></rect>
    }
</svg>
<label for="gain">Volume</label>
<input id="gain" type="range" min="0" max="1" step="0.01" style="width:min(200px, 100%);" @bind-value=gain>

@code {
    AudioContext context = default!;
    OscillatorNode? oscillator;
    GainNode? gainNode;
    float gain = 0.05f;
    int? currentOctave;
    int? currentPitch;
    List<(string Name, int Octave, int Pitch, string Color)> keys = new();
    int[] whiteKeyIndices = Array.Empty<int>();
    int[] blackKeyIndices = Array.Empty<int>();

    protected override async Task OnInitializedAsync()
    {
        context = await AudioContext.CreateAsync(JSRuntime);

        var letters = new List<string>() { "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B" };
        keys = Enumerable
            .Range(3, 3)
            .SelectMany(octave =>
                Enumerable
                .Range(1, 12)
                .Select(pitch => (letters[pitch - 1], octave, pitch, letters[pitch - 1].Contains('#') ? "black" : "white"))
            )
            .ToList();
        whiteKeyIndices = keys.Where(key => key.Color == "white").Select(key => keys.IndexOf(key)).ToArray();
        blackKeyIndices = keys.Where(key => key.Color == "black").Select(key => keys.IndexOf(key)).ToArray();
    }

    public async Task PointerMove(int octave, int pitch, MouseEventArgs e)
    {
        if ((e.Buttons & 1) == 1)
        {
            await StartSound(octave, pitch);
        }
        else
        {
            await StopSound();
        }
    }

    SemaphoreSlim semaphoreSlim = new SemaphoreSlim(1);
    public async Task StartSound(int octave, int pitch)
    {
        await semaphoreSlim.WaitAsync();
        if (currentOctave != octave || currentPitch != pitch)
        {
            await StopSound();
            currentOctave = octave;
            currentPitch = pitch;

            AudioDestinationNode destination = await context.GetDestinationAsync();

            gainNode = await GainNode.CreateAsync(JSRuntime, context, new() { Gain = gain });
            await gainNode.ConnectAsync(destination);

            OscillatorOptions oscillatorOptions = new()
                {
                    Type = OscillatorType.Triangle,
                    Frequency = (float)Frequency(octave, pitch)
                };
            oscillator = await OscillatorNode.CreateAsync(JSRuntime, context, oscillatorOptions);

            await oscillator.ConnectAsync(gainNode);
            await oscillator.StartAsync();
        }
        semaphoreSlim.Release();
    }

    public async Task StopSound()
    {
        if (oscillator is null || gainNode is null) return;
        var currentTime = await context.GetCurrentTimeAsync();
        var audioParam = await gainNode.GetGainAsync();
        await audioParam.LinearRampToValueAtTimeAsync(0, currentTime + 0.3);
        oscillator = null;
        gainNode = null;
        currentOctave = null;
        currentPitch = null;
    }

    private double Frequency(int octave, int pitch)
    {
        var noteIndex = octave * 12 + pitch;
        var a = Math.Pow(2, 1.0 / 12);
        var A4 = 440;
        var A4Index = 4 * 12 + 10;
        var halfStepDifference = noteIndex - A4Index;
        return A4 * Math.Pow(a, halfStepDifference);
    }
}


